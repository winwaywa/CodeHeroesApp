import os
from typing import Optional, Tuple
import streamlit as st
from openai import OpenAI, AzureOpenAI

APP_TITLE = "üîé Code Review & Auto-Fix (Streamlit + OpenAI)"

# ---------- Helpers ----------
def get_client(
    provider: str,
    openai_key: str = "",
    azure_key: str = "",
    azure_api_base: str = "",
    azure_api_version: str = "",
):
    """
    provider: "OpenAI" | "Azure OpenAI"
    - OpenAI: ch·ªâ c·∫ßn api_key
    - Azure OpenAI: c·∫ßn api_key + api_base (https://<resource>.openai.azure.com) + api_version (vd: 2024-02-15-preview)
    """
    if provider == "OpenAI":
        key = openai_key or os.getenv("OPENAI_API_KEY", "")
        if not key:
            raise RuntimeError("Ch∆∞a nh·∫≠p OpenAI API Key.")
        # Kh√¥ng n√™n set env to√†n c·ª•c trong webapp; truy·ªÅn tr·ª±c ti·∫øp cho client an to√†n h∆°n
        return OpenAI(api_key=key)

    # Azure OpenAI
    a_key = azure_key or os.getenv("AZURE_OPENAI_API_KEY", "")
    a_base = azure_api_base or os.getenv("AZURE_OPENAI_API_BASE", "")
    a_ver  = azure_api_version or os.getenv("AZURE_OPENAI_API_VERSION", "2024-02-15-preview")

    if not a_key:
        raise RuntimeError("Ch∆∞a nh·∫≠p Azure OpenAI API Key.")
    if not a_base:
        raise RuntimeError("Ch∆∞a nh·∫≠p Azure OpenAI API Base (v√≠ d·ª•: https://myres.openai.azure.com).")
    if not a_ver:
        raise RuntimeError("Ch∆∞a nh·∫≠p Azure OpenAI API Version (v√≠ d·ª•: 2024-02-15-preview).")

    # L∆ØU √ù: V·ªõi Azure, 'model' s·∫Ω l√† t√™n DEPLOYMENT, kh√¥ng ph·∫£i model g·ªëc.
    # C·∫•u h√¨nh base_url t·ªõi /openai v√† g·∫Øn api-version qua default_query.
    return AzureOpenAI(
        api_key=a_key,
        azure_endpoint=a_base,
        api_version=a_ver
    )

def safe_decode(file_bytes: bytes) -> str:
    # Th·ª≠ UTF-8 ‚Üí UTF-16 ‚Üí Latin-1 cho c√°c file l·∫° encoding
    for enc in ("utf-8", "utf-16", "latin-1"):
        try:
            return file_bytes.decode(enc)
        except Exception:
            continue
    # N·∫øu v·∫´n l·ªói, ƒë·ªçc "best effort"
    return file_bytes.decode("utf-8", errors="replace")

def guess_lang_from_name(filename: str) -> str:
    ext = (filename or "").lower()
    for k, v in {
        ".py": "python",
        ".js": "javascript",
        ".ts": "typescript",
        ".tsx": "tsx",
        ".jsx": "jsx",
        ".java": "java",
        ".cs": "csharp",
        ".cpp": "cpp",
        ".cxx": "cpp",
        ".cc": "cpp",
        ".c": "c",
        ".go": "go",
        ".rs": "rust",
        ".rb": "ruby",
        ".php": "php",
        ".swift": "swift",
        ".kt": "kotlin",
        ".m": "objectivec",
        ".mm": "objectivec",
        ".sh": "bash",
        ".sql": "sql",
        ".html": "html",
        ".css": "css",
        ".json": "json",
        ".yml": "yaml",
        ".yaml": "yaml",
        ".toml": "toml",
        ".md": "markdown",
    }.items():
        if ext.endswith(k):
            return v
    return "text"

def build_review_system_prompt(language: str) -> str:
    return f"""You are a senior {language} code reviewer.
Return a concise, actionable review in Markdown with these sections:

1) Summary ‚Äî 2-5 bullets describing what this code does.
2) Major Issues ‚Äî security, correctness, race conditions, resource leaks, undefined behavior.
3) Minor Issues ‚Äî style, naming, dead code, logging, comments.
4) Performance ‚Äî hotspots and complexity; be concrete.
5) Security ‚Äî input validation, injection, secrets, permissions.
6) Tests ‚Äî propose unit/integration test cases.
7) Fix Plan ‚Äî a short, ordered plan to fix the most important issues.

If you reference code, quote exact snippets with line numbers if obvious. Keep it practical.
"""

def build_fix_system_prompt(language: str) -> str:
    return f"""You are a senior {language} engineer. Produce a FIXED version of the input code.
Rules:
- Return ONLY the full corrected code block, fenced as ```{language}``` ‚Ä¶ ``` with no extra commentary.
- Apply the highest-impact fixes from the review (correctness, security, performance, readability).
- Preserve public APIs unless they are clearly wrong; add comments where decisions are non-obvious.
"""

def call_openai_review(client, model: str, language: str, code: str, extra_note: str = "") -> str:
    system_prompt = build_review_system_prompt(language)
    user_prompt = f"""Review the following {language} code and write your feedback in **Vietnamese**.
        ```{language}
        {code}
        Additional context or constraints (optional):
        {extra_note or "(none)"}"""
    
    resp = client.chat.completions.create(
        model=model,
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt},
        ],
        temperature=0.2,
        )
    return resp.choices[0].message.content


def call_openai_fix(client, model: str, language: str, code: str, review_summary: str = "") -> str:
    system_prompt = build_fix_system_prompt(language)
    user_prompt = f"""Here is the original {language} code and the previous review summary.
        Please produce the FIXED full code only.

        [REVIEW]
        {review_summary or "(no review provided)"}

        [CODE]
        {code}
        ```"""
    resp = client.chat.completions.create(
        model=model,
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt},
        ],
        temperature=0.1,
    )
    return resp.choices[0].message.content

def extract_code_block(markdown_text: str) -> Tuple[str, Optional[str]]:
    """
    T√°ch code block ƒë·∫ßu ti√™n t·ª´ Markdown tr·∫£ v·ªÅ: (code, lang_guess)
    N·∫øu kh√¥ng c√≥ code fence, tr·∫£ v·ªÅ (to√†n b·ªô text, None)
    """
    if not markdown_text:
        return "", None
    start = markdown_text.find("```")
    if start == -1:
        return markdown_text.strip(), None
    # find closing fence
    first_line_end = markdown_text.find("\n", start + 3)
    fence_lang = markdown_text[start + 3:first_line_end].strip() if first_line_end != -1 else ""
    end = markdown_text.find("```", first_line_end + 1 if first_line_end != -1 else start + 3)
    if end == -1:
        return markdown_text.strip(), None
    code = markdown_text[first_line_end + 1:end] if first_line_end != -1 else ""
    return code.strip(), (fence_lang or None)

# ---------- UI ----------
st.set_page_config(page_title="Code Review & Fix", page_icon="üõ†Ô∏è", layout="wide")
st.title(APP_TITLE)
st.caption(
    "Nh·∫≠p code ·ªü √¥ b√™n d∆∞·ªõi **ho·∫∑c** upload file. "
    "B·∫•m **Review** ƒë·ªÉ nh·ªù OpenAI ph√¢n t√≠ch, sau ƒë√≥ **Fix code** ƒë·ªÉ t·∫°o b·∫£n ƒë√£ ch·ªânh."
)

with st.sidebar:
    st.subheader("‚öôÔ∏è Settings")

    provider = st.selectbox("Provider", ["OpenAI", "Azure OpenAI"], index=0)

    if provider == "OpenAI":
        api_key = st.text_input(
            "OpenAI API Key",
            type="password",
            help="Ho·∫∑c ƒë·∫∑t qua bi·∫øn m√¥i tr∆∞·ªùng OPENAI_API_KEY."
        )
        # Model danh s√°ch s·∫µn c√≥ cho OpenAI
        model = st.selectbox(
            "Model (OpenAI)",
            ["gpt-4o-mini", "gpt-4.1-mini", "o4-mini"],
            index=0,
            help="Ch·ªçn model c·ªßa OpenAI."
        )
    else:
        # Azure OpenAI: nh·∫≠p th·ªß c√¥ng
        azure_api_base = st.text_input(
            "Azure API Base",
            placeholder="https://<resource>.openai.azure.com",
            help="Endpoint c·ªßa Azure OpenAI, v√≠ d·ª•: https://myres.openai.azure.com"
        )
        azure_api_version = st.text_input(
            "Azure API Version",
            value="2024-02-15-preview",
            help="V√≠ d·ª•: 2024-02-15-preview (ph·ª• thu·ªôc subscription c·ªßa b·∫°n)"
        )
        azure_api_key = st.text_input(
            "Azure API Key",
            type="password",
            help="Ho·∫∑c ƒë·∫∑t qua AZURE_OPENAI_API_KEY."
        )
        # V·ªõi Azure, 'model' = t√™n DEPLOYMENT
        model = st.text_input(
            "Deployment name (Azure)",
            placeholder="vd: gpt-4o-mini-deploy",
            help="T√™n deployment b·∫°n ƒë√£ t·∫°o trong Azure OpenAI."
        )

    default_lang = st.selectbox(
        "Ng√¥n ng·ªØ code m·∫∑c ƒë·ªãnh (n·∫øu kh√¥ng ƒëo√°n ƒë∆∞·ª£c t·ª´ filename)",
        ["python","javascript","typescript","java","csharp","cpp","go","rust","php","ruby","swift","kotlin","bash","sql","html","css","json","yaml","text"],
        index=0
    )
    note = st.text_area("Ghi ch√∫/ti√™u ch√≠ review (tu·ª≥ ch·ªçn)", placeholder="V√≠ d·ª•: ∆∞u ti√™n performance, tr√°nh thay ƒë·ªïi public API...")
    st.divider()
    st.caption("üí° Tip: D√πng `@st.cache_data` / `@st.cache_resource` ƒë·ªÉ cache d·ªØ li·ªáu/model n·∫øu app l·ªõn.")


tab_paste, tab_file = st.tabs(["‚úçÔ∏è Paste code", "üìÅ Upload file"])

with tab_paste:
    code_text = st.text_area("D√°n code v√†o ƒë√¢y", height=280, placeholder="Paste your code‚Ä¶")
    paste_lang = st.selectbox("Ng√¥n ng·ªØ (n·∫øu d√°n code)", ["(auto from default)"] + [
        "python","javascript","typescript","java","csharp","cpp","go","rust","php","ruby","swift","kotlin","bash","sql","html","css","json","yaml","text"
    ])

with tab_file:
    file = st.file_uploader("Ch·ªçn file m√£ ngu·ªìn", type=None, accept_multiple_files=False)
    file_code = ""
    file_lang = None
    if file is not None:
        file_code = safe_decode(file.read())
        file_lang = guess_lang_from_name(file.name)
        st.caption(f"ƒê√£ ƒë·ªçc: **{file.name}** ‚Äî ph√°t hi·ªán ng√¥n ng·ªØ: `{file_lang}`")
        st.code(file_code[:1000] + ("\n‚Ä¶ (truncated)" if len(file_code) > 1000 else ""), language=file_lang)

# Session state
if "last_code" not in st.session_state:
    st.session_state.last_code = ""
if "last_lang" not in st.session_state:
    st.session_state.last_lang = "text"
if "last_review_md" not in st.session_state:
    st.session_state.last_review_md = ""
if "fixed_code_block" not in st.session_state:
    st.session_state.fixed_code_block = ""

# Determine current input
active_code = ""
active_lang = default_lang

if file is not None and file_code:
    active_code = file_code
    active_lang = file_lang or default_lang
elif code_text.strip():
    active_code = code_text
    active_lang = (None if paste_lang == "(auto from default)" else paste_lang) or default_lang
else:
    active_lang = default_lang

# --- Buttons (ch·ªâ ƒë·ªÉ Review) ---
c1, _, _ = st.columns([1, 1, 2])

with c1:
    do_review = st.button(
        "üîç Review",
        use_container_width=True,
        disabled=(not active_code),
        key="btn_review"
    )

# --- Actions ---

# Khi b·∫•m REVIEW
# Khi b·∫•m REVIEW
if do_review:
    try:
        if provider == "OpenAI":
            client = get_client(
                provider="OpenAI",
                openai_key=(api_key or os.getenv("OPENAI_API_KEY", "")),
            )
        else:
            client = get_client(
                provider="Azure OpenAI",
                azure_key=(azure_api_key or os.getenv("AZURE_OPENAI_API_KEY", "")),
                azure_api_base=(azure_api_base or os.getenv("AZURE_OPENAI_API_BASE", "")),
                azure_api_version=(azure_api_version or os.getenv("AZURE_OPENAI_API_VERSION", "2024-02-15-preview")),
            )

        with st.status("ƒêang g·ª≠i code l√™n model ƒë·ªÉ review‚Ä¶", expanded=True) as status:
            st.write("Provider:", provider)
            st.write("Model / Deployment:", model)
            st.write("Language:", active_lang)
            review_md = call_openai_review(client, model, active_lang, active_code, note)
            status.update(label="‚úÖ Review xong", state="complete")

        st.session_state.last_code = active_code
        st.session_state.last_lang = active_lang
        st.session_state.last_review_md = review_md
        st.session_state.fixed_code_block = ""  # reset b·∫£n fix c≈©
    except Exception as e:
        st.exception(e)

# N·∫øu ƒë√£ c√≥ review th√¨ m·ªõi hi·ªán review + n√∫t FIX
if st.session_state.last_review_md:
    st.subheader("üìã K·∫øt qu·∫£ Review")
    st.markdown(st.session_state.last_review_md)

    # Cho ph√©p auto-fix ngay sau review (tu·ª≥ ch·ªçn)
    auto_fix = st.checkbox("T·ª± ƒë·ªông t·∫°o b·∫£n ƒë√£ s·ª≠a ngay sau khi review", value=False)

    # N√∫t FIX lu√¥n ·ªü ƒë√¢y ƒë·ªÉ ch·∫Øc ch·∫Øn ƒë√£ c√≥ review
    do_fix = auto_fix or st.button("üõ†Ô∏è Fix code", use_container_width=True)

    if do_fix:
        try:
            if provider == "OpenAI":
                client = get_client(
                    provider="OpenAI",
                    openai_key=(api_key or os.getenv("OPENAI_API_KEY", "")),
                )
            else:
                client = get_client(
                    provider="Azure OpenAI",
                    azure_key=(azure_api_key or os.getenv("AZURE_OPENAI_API_KEY", "")),
                    azure_api_base=(azure_api_base or os.getenv("AZURE_OPENAI_API_BASE", "")),
                    azure_api_version=(azure_api_version or os.getenv("AZURE_OPENAI_API_VERSION", "2024-02-15-preview")),
                )

            with st.status("ƒêang y√™u c·∫ßu model t·∫°o b·∫£n code ƒë√£ s·ª≠a‚Ä¶", expanded=True) as status:
                fixed_md = call_openai_fix(
                    client,
                    model,  # OpenAI: model id; Azure: deployment name
                    st.session_state.last_lang,
                    st.session_state.last_code,
                    st.session_state.last_review_md,
                )
                status.update(label="‚úÖ ƒê√£ t·∫°o b·∫£n s·ª≠a", state="complete")

            fixed_code, fenced_lang = extract_code_block(fixed_md)
            st.session_state.fixed_code_block = (fixed_code or fixed_md).strip()
        except Exception as e:
            st.exception(e)

# Hi·ªÉn th·ªã k·∫øt qu·∫£ FIX (n·∫øu c√≥)
if st.session_state.fixed_code_block:
    st.subheader("‚úÖ Code ƒë√£ Fix")
    st.code(st.session_state.fixed_code_block, language=st.session_state.last_lang or "text")


    # G·ª£i √Ω t√™n file xu·∫•t
    download_name = "fixed_code"
    if file is not None and getattr(file, "name", None):
        base = os.path.splitext(file.name)[0]
        ext = os.path.splitext(file.name)[1]
        download_name = f"{base}.fixed{ext or ''}"
    elif st.session_state.last_lang:
        # map ƒë∆°n gi·∫£n sang ph·∫ßn m·ªü r·ªông
        ext_map = {
            "python": ".py","javascript": ".js","typescript": ".ts","java": ".java",
            "csharp": ".cs","cpp": ".cpp","go": ".go","rust": ".rs","php": ".php",
            "ruby": ".rb","swift": ".swift","kotlin": ".kt","bash": ".sh","sql": ".sql",
            "html": ".html","css": ".css","json": ".json","yaml": ".yml","text": ".txt"
        }
        download_name += ext_map.get(st.session_state.last_lang, ".txt")

    st.download_button(
        "‚¨áÔ∏è T·∫£i code ƒë√£ fix",
        data=st.session_state.fixed_code_block.encode("utf-8"),
        file_name=download_name,
        mime="text/plain",
        use_container_width=True,
    )

st.divider()
with st.expander("‚ÑπÔ∏è Ghi ch√∫ tri·ªÉn khai"):
    st.markdown(
        """
    - App n√†y **kh√¥ng l∆∞u** API key hay source code c·ªßa b·∫°n; m·ªçi th·ª© ·ªü trong **phi√™n l√†m vi·ªác hi·ªán t·∫°i**.
    - B·∫°n c√≥ th·ªÉ thay model trong sidebar; v·ªõi code d√†i, n√™n d√πng model m·∫°nh h∆°n (v√≠ d·ª• `gpt-4.1`).
    - N·∫øu c·∫ßn **rule ch·∫∑t ch·∫Ω** h∆°n (PSR, PEP8, OWASP, MISRA‚Ä¶), h√£y vi·∫øt v√†o √¥ *Ghi ch√∫/ti√™u ch√≠ review*.
    - ƒê·ªÉ ch·∫°y:
    ```bash
    pip install -U streamlit openai
    export OPENAI_API_KEY=sk-...
    streamlit run app.py
    """
    )